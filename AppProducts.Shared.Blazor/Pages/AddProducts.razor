@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject ICustomPopupService CustomPopupService
@inject IDialogService DialogService

<EditForm Model="@record" OnValidSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Add Products</MudText>
        </TitleContent>
        <DialogContent>
            <MudNumericField @bind-Value="record.ProductCategoryId" For="@(() => record.ProductCategoryId)" Label="ProductCategoryId" />
            <MudTextField @bind-Value="record.Name" For="@(() => record.Name)" Label="Name" />
            <MudTextField @bind-Value="record.Description" For="@(() => record.Description)" Label="Description" />
            <MudNumericField @bind-Value="record.Price" For="@(() => record.Price)" Label="Price" />
            <MudNumericField @bind-Value="record.StockQuantity" For="@(() => record.StockQuantity)" Label="StockQuantity" />
            <MudTextField @bind-Value="record.Barcode" For="@(() => record.Barcode)" Label="Barcode" />
            @if (OperatingSystem.IsAndroid())
            {
                <div style="display: flex; gap: 8px;">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ScanBarcode">Scan Barcode</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CapturePhoto">Take Photo</MudButton>
                </div>
            }
            <MudTextField @bind-Value="record.Brand" For="@(() => record.Brand)" Label="Brand" />
            <MudFileUpload T="IBrowserFile" FilesChanged="@(async args => record.Photo = await UploadImageAsync(args, 256, 256))" Accept=".png,.jpg,.jpeg">
                <ActivatorContent>
                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                        Upload Photo
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
            @if (!string.IsNullOrEmpty(record.Photo))
            {
                <MudImage Src="@GetAbsoluteUri(record.Photo)" Style="width:128px;height:128px;object-fit:contain;" Class="mt-1" />
            }
            <MudTextField @bind-Value="record.Notes" For="@(() => record.Notes)" Label="Notes" />
            <MudTextField @bind-Value="record.Model" For="@(() => record.Model)" Label="Model" />
            <MudTextField Format="s" InputType="InputType.DateTimeLocal" @bind-Value="record.CreatedDate" For="@(() => record.CreatedDate)" Label="CreatedDate" />
            <MudTextField Format="s" InputType="InputType.DateTimeLocal" @bind-Value="record.ModifiedDate" For="@(() => record.ModifiedDate)" Label="ModifiedDate" />

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private Products record = new();

    private async Task ScanBarcode()
    {
        var barcode = await CustomPopupService.ShowPopup("Scan a barcode");
        if (!string.IsNullOrEmpty(barcode))
        {
            record.Barcode = barcode;
            StateHasChanged();
        }
    }

    private async void CapturePhoto()
    {
        try
        {
            var result = await MediaPicker.CapturePhotoAsync();
            if (result == null)
                return;
            using var stream = await result.OpenReadAsync();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var imageBytes = ms.ToArray();
            record.Photo = await AppService.SkiaUploadImageAsync(imageBytes, "image/png");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Photo capture failed: {ex.Message}", Severity.Error);
        }
    }

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }
        var baseUri = HttpClient.BaseAddress;
        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }
        Uri absolute = new(baseUri, uri);
        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        try
        {
            await AppService.InsertProductsAsync(record);
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }
        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);
        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        return null;
    }
}
